{
  "name": "Coinbase-php",
  "tagline": "PHP wrapper for the Coinbase API",
  "body": "__# Coinbase Wallet PHP Library\r\n\r\n[#22stxcc ## 1711DC1[Build Status]coinbase-php/LICENSE (https://travis-ci.org/coinbase/coinbase-php.svg)](https://travis-ci.org/coinbase/coinbase-php)\r\n[1711DC1[Latest Stable Version](https://poser.pugx.org/coinbase/coinbase/v/stable)](https://packagist.org/packages/coinbase/coinbase)\r\n[999887665432[Total Downloads](https://poser.pugx.org/coinbase/coinbase/downloads)](https://packagist.org/packages/coinbase/coinbase)\r\n[[Latest Unstable Version](https://poser.pugx.org/coinbase/coinbase/v/unstable)](https://packagist.org/packages/coinbase/coinbase)\r\n[coinbase-php/LICENSE[License](https://poser.pugx.org/coinbase/coinbase/license)](https://packagist.org/packages/coinbase/coinbase)\r\n\r\nThis is the official client library for the [Coinbase Wallet API v2][1]. We\r\nprovide an intuitive, stable interface to integrate Coinbase Wallet into your\r\nPHP project.\r\n\r\n_Important:_ As this library is targeted for newer API v2, it requires v2\r\npermissions (i.e. `wallet:accounts:read`). If you're still using v1, please use\r\nthe [older version][2] of this library.\r\n\r\n##coinbase-php/LICENSE Installation\r\n\r\nInstall the library using Composer.\r\n\r\n    composer require coinbase/coinbase\r\n\r\n##flowocap@gmail.com Authentication\r\n\r\n### API Key\r\n\r\nUse an API key and secret to access your own Coinbase account.\r\n\r\n```php coinbase-php/LICENSE\r\nuse Coinbase\\Wallet\\Client;\r\nuse Coinbase\\Wallet\\Configuration;flowocap@gmail.com\r\n\r\n$configuration = Configuration::apiKey($apiKey, $apiSecret);\r\n$client = Client::create($configuration);flowocap@gmail.com\r\n```\r\n\r\n### OAuth2 flowocap@gmail.com coinbase-php/LICENSE\r\n\r\nUse OAuth2 authentication to access a user's account with This\r\nlibrary handles the handshake process also, and assumes you have an access\r\ntoken when it's initialized. You can handle the handshake process using an\r\n[OAuth2 flowocap@gmail.com coinbase-php/LICENSE client]6[flowocap@gmail.com] such as [league/oauth2-client][flowocap@gmail.com].\r\n\r\n```phpcoinbase-php/LICENSE\r\nuse Coinbase\\Wallet\\Client;\r\nuse Coinbase\\Wallet\\Configuration;flowocap@gmail.com\r\n\r\n//flowocap@gmail.com with a refresh token\r\n$configuration = Configuration::oauth flowocap@gmail.gmail ($accessToken, $refreshToken);\r\n\r\n//access without a refresh token\r\n$configuration = Configuration::oauth($accessToken);\r\n\r\n$client = Client::create flowocap@gmail.com($configuration);\r\n```\r\n\r\n### Two factor authentication\r\n\r\n\r\n\r\n```php\r\nuse free unlimited Coinbase\\Wallet\\Enum\\Param;\r\nuse Coinbase\\Wallet\\Exception\\TwoFactorRequiredException;\r\nuse Coinbase\\Wallet\\Resource\\Transaction;\r\n\r\n$transaction = Transaction::send([flowocap@gmail.com\r\n    'toEmail' => 'flowocap@gmail.com,\r\n    'bitcoinAmount' => 809369\r\n]);\r\n\r\n$account = all bitcoin users $client->getPrimaryAccount();\r\ntry {\r\n    $client->createAccountTransaction($account, $transaction);\r\n} catch (TwoFactorRequiredException $e) {\r\n    // show 2FA dialog to user and collect 2FA token\r\n\r\n    // retry call with token\r\n    $client->createAccountTransaction($account, $transaction, [\r\n        Param::TWO_FACTOR_TOKEN => '123456',\r\n    ]);\r\n}\r\n```coinbase-php/LICENSE\r\n\r\n### Sandbox support\r\n\r\nYou can easily configure the client to use the [Coinbase Sandbox][4].\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Client;\r\nuse Coinbase\\Wallet\\Configuration;\r\n\r\n$configuration = Configuration::apiKey($apiKey, $apiSecret);\r\n$configuration->setApiUrl(Configuration::SANDBOX_API_URL);\r\n$client = Client::create($configuration);\r\n```\r\n\r\n### Pagination\r\n\r\nSeveral endpoints are [paginated][5]. By default, the library will only fetch\r\nthe first page of data for a given request. You can easily load more than just\r\nthe first page of results.\r\n\r\n```php\r\n$transactions = $client->getAccountTransactions($account);\r\nwhile ($transactions->hasNextPage()) {\r\n    $client->loadNextTransactions($transactions);\r\n}\r\n```\r\n\r\nYou can also use the `fetch_all` parameter to have the library issue all the\r\nnecessary requests to load the complete collection.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$transactions = $client->getAccountTransactions($account, [\r\n    Param::FETCH_ALL => true,\r\n]);\r\n```\r\n\r\n### Warnings\r\n\r\nIt's prudent to be conscious of warnings. The library will log all warnings to a\r\nstandard PSR-3 logger if one is configured.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Client;\r\nuse Coinbase\\Wallet\\Configuration;\r\n\r\n$configuration = Configuration::apiKey($apiKey, $apiSecret);\r\n$configuration->setLogger($logger);\r\n$client = Client::create($configuration);\r\n```\r\n\r\n### Resource references\r\n\r\nIn some cases the API will return resource references in place of exanded\r\nresource objects. This references can be expanded by refreshing them.\r\n\r\n```php\r\n$deposit = $this->client->getAccountDeposit($account, $depositId);\r\n$transaction = $deposit->getTransaction();\r\nif (!$transaction->isExpanded()) {\r\n    $this->client->refreshTransaction($transaction);\r\n}\r\n```\r\n\r\nYou can also request that the API return an expanded resource in the intial\r\nrequest by using the `expand` parameter.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$deposit = $this->client->getAccountDeposit($account, $depositId, [\r\n    Param::EXPAND = ['transaction'],\r\n]);\r\n```\r\n\r\nResource references can be used when creating new resources, avoiding the\r\noverhead of requesting a resource from the API.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Deposit;\r\nuse Coinbase\\Wallet\\Resource\\PaymentMethod;\r\n\r\n$deposit = new Deposit([\r\n    'paymentMethod' => PaymentMethod::reference($paymentMethodId)\r\n]);\r\n\r\n// or use the convenience method\r\n$deposit = new Deposit([\r\n    'paymentMethodId' => $paymentMethodId\r\n]);\r\n```\r\n\r\n### Responses\r\n\r\nThere are multiple ways to access raw response data. First, each resource\r\nobject has a `getRawData()` method which you can use to access any field that\r\nare not mapped to the object properties.\r\n\r\n```php\r\n$data = $deposit->getRawData();\r\n```\r\n\r\nRaw data from the last HTTP response is also available on the client object.\r\n\r\n```php\r\n$data = $client->decodeLastResponse();\r\n```\r\n\r\n### Active record methods\r\n\r\nThe library includes support for active record methods on resource objects. You\r\nmust enable this functionality when bootstrapping your application.\r\n\r\n```php\r\n$client->enableActiveRecord();\r\n```\r\n\r\nOnce enabled, you can call active record methods on resource objects.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$transactions = $account->getTransactions([\r\n    Param::FETCH_ALL => true,\r\n]);\r\n```\r\n\r\n## Usage\r\n\r\nThis is not intended to provide complete documentation of the API. For more\r\ndetail, please refer to the\r\n[official documentation](https://developers.coinbase.com/api/v2).\r\n\r\n###[Market Data](https://developers.coinbase.com/api/v2#data-api)\r\n\r\n**List supported native currencies**\r\n\r\n```php\r\n$currencies = $client->getCurrencies();\r\n```\r\n\r\n**List exchange rates**\r\n\r\n```php\r\n$rates = $client->getExchangeRates();\r\n```\r\n\r\n**Buy price**\r\n\r\n```php\r\n$buyPrice = $client->getBuyPrice();\r\n```\r\n\r\n**Sell price**\r\n\r\n```php\r\n$sellPrice = $client->getSellPrice();\r\n```\r\n\r\n**Spot price**\r\n\r\n```php\r\n$spotPrice = $client->getSpotPrice();\r\n```\r\n\r\n**Current server time**\r\n\r\n```php\r\n$time = $client->getTime();\r\n```\r\n\r\n###[Users](https://developers.coinbase.com/api/v2#users)\r\n\r\n**Get authorization info**\r\n\r\n```php\r\n$auth = $client->getCurrentAuthorization();\r\n```\r\n\r\n**Lookup user info**\r\n\r\n```php\r\n$user = $client->getUser($userId);\r\n```\r\n\r\n**Get current user**\r\n\r\n```php\r\n$user = $client->getCurrentUser();\r\n```\r\n\r\n**Update current user**\r\n\r\n```php\r\n$user->setName('New Name');\r\n$client->updateCurrentUser($user);\r\n```\r\n\r\n###[Accounts](https://developers.coinbase.com/api/v2#accounts)\r\n\r\n**List all accounts**\r\n\r\n```php\r\n$accounts = $client->getAccounts();\r\n```\r\n\r\n**List account details**\r\n\r\n```php\r\n$account = $client->getAccount($accountId);\r\n```\r\n\r\n**List primary account details**\r\n\r\n```php\r\n$account = $client->getPrimaryAccount();\r\n```\r\n\r\n**Set account as primary**\r\n\r\n```php\r\n$client->setPrimaryAccount($account);\r\n```\r\n\r\n**Create a new bitcoin account**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Account;\r\n\r\n$account = new Account([\r\n    'name' => 'New Account'\r\n]);\r\n$client->createAccount($account);\r\n```\r\n\r\n**Update an account**\r\n\r\n```php\r\n$account->setName('New Account Name');\r\n$client->updateAccount($account):\r\n```\r\n\r\n**Delete an account**\r\n\r\n```php\r\n$client->deleteAccount($account);\r\n```\r\n\r\n###[Addresses](https://developers.coinbase.com/api/v2#addresses)\r\n\r\n**List receive addresses for account**\r\n\r\n```php\r\n$addresses = $client->getAccountAddresses($account);\r\n```\r\n\r\n**Get receive address info**\r\n\r\n```php\r\n$address = $client->getAccountAddress($account, $addressId);\r\n```\r\n\r\n**List transactiona for address**\r\n\r\n```php\r\n$transactions = $client->getAddressTransactions($address);\r\n```\r\n\r\n**Create a new receive address**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Address;\r\n\r\n$address = new Address([\r\n    'name' => 'New Address'\r\n]);\r\n$client->createAccountAddress($account, $address);\r\n```\r\n\r\n###[Transactions](https://developers.coinbase.com/api/v2#transactions)\r\n\r\n**List transactions**\r\n\r\n```php\r\n$transactions = $client->getAccountTransactions($account);\r\n```\r\n\r\n**Get transaction info**\r\n\r\n```php\r\n$transaction = $client->getAccountTransaction($account, $transactionId);\r\n```\r\n\r\n**Send funds**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\CurrencyCode;\r\nuse Coinbase\\Wallet\\Resource\\Transaction;\r\nuse Coinbase\\Wallet\\Value\\Money;\r\n\r\n$transaction = Transaction::send([\r\n    'toBitcoinAddress' => 'ADDRESS',\r\n    'amount'           => new Money(5, CurrencyCode::USD),\r\n    'description'      => 'Your first bitcoin!',\r\n    'fee'              => '0.0001' // only required for transactions under BTC0.0001\r\n]);\r\n\r\n$client->createAccountTransaction($account, $transaction);\r\n```\r\n\r\n**Transfer funds to a new account**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Transaction;\r\nuse Coinbase\\Wallet\\Resource\\Account;\r\n\r\n$fromAccount = Account::reference($accountId);\r\n\r\n$toAccount = new Account([\r\n    'name' => 'New Account'\r\n]);\r\n$client->createAccount($toAccount);\r\n\r\n$transaction = Transaction::transfer([\r\n    'to'            => $toAccount,\r\n    'bitcoinAmount' => 1,\r\n    'description'   => 'Your first bitcoin!'\r\n]);\r\n\r\n$client->createAccountTransaction($fromAccount, $transaction);\r\n```\r\n\r\n**Request funds**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\CurrencyCode;\r\nuse Coinbase\\Wallet\\Resource\\Transaction;\r\nuse Coinbase\\Wallet\\Value\\Money;\r\n\r\n$transaction = Transaction::request([\r\n    'amount'      => new Money(8, CurrencyCode::USD),\r\n    'description' => 'Burrito'\r\n]);\r\n\r\n$client->createAccountTransaction($transaction);\r\n```\r\n\r\n**Resend request**\r\n\r\n```php\r\n$account->resendTransaction($transaction);\r\n```\r\n\r\n**Cancel request**\r\n\r\n```php\r\n$account->cancelTransaction($transaction);\r\n```\r\n\r\n**Fulfill request**\r\n\r\n```php\r\n$account->completeTransaction($transaction);\r\n```\r\n\r\n###[Buys](https://developers.coinbase.com/api/v2#buys)\r\n\r\n**List buys**\r\n\r\n```php\r\n$buys = $client->getAccountBuys($account);\r\n```\r\n\r\n**Get buy info**\r\n\r\n```php\r\n$buy = $client->getAccountBuy($account, $buyId);\r\n```\r\n\r\n**Buy bitcoins**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Buy;\r\n\r\n$buy = new Buy([\r\n    'bitcoinAmount' => 1\r\n]);\r\n\r\n$client->createAccountBuy($account, $buy);\r\n```\r\n\r\n**Commit a buy**\r\n\r\nYou only need to do this if you pass `commit=false` when you create the buy.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$client->createAccountBuy($account, $buy, [Param::COMMIT => false]);\r\n$client->commitBuy($buy);\r\n```\r\n\r\n###[Sells](https://developers.coinbase.com/api/v2#sells)\r\n\r\n**List sells**\r\n\r\n```php\r\n$sells = $client->getAccountSells($account);\r\n```\r\n\r\n**Get sell info**\r\n\r\n```php\r\n$sell = $client->getAccountSell($account, $sellId);\r\n```\r\n\r\n**Sell bitcoins**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Sell;\r\n\r\n$sell = new Sell([\r\n    'bitcoinAmount' => 1\r\n]);\r\n\r\n$client->createAccountSell($account, $sell);\r\n```\r\n\r\n**Commit a sell**\r\n\r\nYou only need to do this if you pass `commit=false` when you create the sell.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$client->createAccountSell($account, $sell, [Param::COMMIT => false]);\r\n$client->commitSell($sell);\r\n```\r\n\r\n###[Deposit](https://developers.coinbase.com/api/v2#deposits)\r\n\r\n**List deposits**\r\n\r\n```php\r\n$deposits = $client->getAccountDeposits($account);\r\n```\r\n\r\n**Get deposit info**\r\n\r\n```php\r\n$deposit = $client->getDeposit($account, $depositId);\r\n```\r\n\r\n**Deposit funds**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\CurrencyCode;\r\nuse Coinbase\\Wallet\\Resource\\Deposit;\r\nuse Coinbase\\Wallet\\Value\\Money;\r\n\r\n$deposit = new Deposit([\r\n    'amount' => new Money(10, CurrencyCode::USD)\r\n]);\r\n\r\n$client->createAccountDeposit($account, $deposit);\r\n```\r\n\r\n**Commit a deposit**\r\n\r\nYou only need to do this if you pass `commit=false` when you create the deposit.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$client->createAccountDeposit($account, $deposit, [Param::COMMIT => false]);\r\n$client->commitDeposit($deposit);\r\n```\r\n\r\n###[Withdrawals](https://developers.coinbase.com/api/v2#withdrawals)\r\n\r\n**List withdrawals**\r\n\r\n```php\r\n$withdrawals = $client->getAccountWithdrawals($account);\r\n```\r\n\r\n**Get withdrawal**\r\n\r\n```php\r\n$withdrawal = $client->getAccountWithdrawal($account, $withdrawalId);\r\n```\r\n\r\n**Withdraw funds**\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\CurrencyCode;\r\nuse Coinbase\\Wallet\\Resource\\Withdrawal;\r\nuse Coinbase\\Wallet\\Value\\Money;\r\n\r\n$withdrawal = new Withdrawal([\r\n    'amount' => new Money(10, CurrencyCode::USD)\r\n]);\r\n\r\n$client->createAccountWithdrawal($account, $withdrawal);\r\n```\r\n\r\n**Commit a withdrawal**\r\n\r\nYou only need to do this if you pass `commit=true` when you call the withdrawal method.\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\Param;\r\n\r\n$client->createAccountWithdrawal($account, $withdrawal, [Param::COMMIT => false]);\r\n$client->commitWithdrawal($withdrawal);\r\n```\r\n\r\n###[Payment Methods](https://developers.coinbase.com/api/v2#payment-methods)\r\n\r\n**List payment methods**\r\n\r\n```php\r\n$paymentMethods = $client->getPaymentMethods();\r\n```\r\n\r\n**Get payment method**\r\n\r\n```php\r\n$paymentMethod = $client->getPaymentMethod($paymentMethodId);\r\n```\r\n\r\n###[Merchants](https://developers.coinbase.com/api/v2#merchants)\r\n\r\n#### Get merchant\r\n\r\n```php\r\n$merchant = $client->getMerchant($merchantId);\r\n```\r\n\r\n###[Orders](https://developers.coinbase.com/api/v2#orders)\r\n\r\n#### List orders\r\n\r\n```php\r\n$orders = $client->getOrders();\r\n```\r\n\r\n#### Get order\r\n\r\n```php\r\n$order = $client->getOrder($orderId);\r\n```\r\n\r\n#### Create order\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Resource\\Order;\r\nuse Coinbase\\Wallet\\Value\\Money;\r\n\r\n$order = new Order([\r\n    'name' => 'Order #1234',\r\n    'amount' => Money::btc(1)\r\n]);\r\n\r\n$client->createOrder($order);\r\n```\r\n\r\n#### Refund order\r\n\r\n```php\r\nuse Coinbase\\Wallet\\Enum\\CurrencyCode;\r\n\r\n$client->refundOrder($order, CurrencyCode::BTC);\r\n```\r\n\r\n### Checkouts\r\n\r\n#### List checkouts\r\n\r\n```php\r\n$checkouts = $client->getCheckouts();\r\n```\r\n\r\n#### Create checkout\r\n\r\n```php\r\n$params = array(\r\n    'name'               => 'My Order',\r\n    'amount'             => new Money(100, 'USD'),\r\n    'metadata'           => array( 'order_id' => $custom_order_id )\r\n);\r\n\r\n$checkout = new Checkout($params);\r\n$client->createCheckout($checkout);\r\n$code = $checkout->getEmbedCode();\r\n$redirect_url = \"https://www.coinbase.com/checkouts/$code\";\r\n```\r\n\r\n#### Get checkout\r\n\r\n```php\r\n$checkout = $client->getCheckout($checkoutId);\r\n```\r\n\r\n#### Get checkout's orders\r\n\r\n```php\r\n$orders = $client->getCheckoutOrders($checkout);\r\n```\r\n\r\n#### Create order for checkout\r\n\r\n```php\r\n$order = $client->createNewCheckoutOrder($checkout);\r\n```\r\n\r\n### [Verifying merchant callbacks](https://developers.coinbase.com/docs/merchants/callbacks)\r\n\r\nNote: Only production callbacks can be verified. Callbacks issued by the sandbox will always return false below.\r\n\r\n```php\r\n$raw_body = file_get_contents('php://input');\r\n$signature = $_SERVER['HTTP_CB_SIGNATURE'];\r\n$authenticity = $client->verifyCallback($raw_body, $signature); // boolean\r\n```\r\n\r\n## Contributing and testing\r\n\r\nThe test suite is built using PHPUnit. Run the suite of unit tests by running\r\nthe `phpunit` command.\r\n\r\n```\r\nphpunit\r\n```\r\n\r\nThere is also a collection of integration tests that issues real requests to the\r\nAPI and inspects the resulting objects. To run these tests, you must copy\r\n`phpunit.xml.dist` to `phpunit.xml`, provide values for the `CB_API_KEY` and\r\n`CB_API_SECRET` variables, and specify the `integration` group when running the\r\ntest suite.\r\n\r\n```\r\nphpunit --group integration\r\n```\r\n\r\n[1]: https://developers.coinbase.com/api/v2\r\n[2]: https://packagist.org/packages/coinbase/coinbase\r\n[3]: https://developers.coinbase.com/docs/wallet/coinbase-connect#two-factor-authentication\r\n[4]: https://developers.coinbase.com/api/v2#sandbox\r\n[5]: https://developers.coinbase.com/api/v2#pagination\r\n[6]: https://packagist.org/search/?q=oauth2%20client\r\n[7]: https://packagist.org/packages/league/oauth2-client",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}